<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapperDynamicSQL">
	<!-- 
• if:判断
• trim 字符串截取(where(封装查询条件), set(封装修改条件))
• choose (when, otherwise):分支选择；带了break的swtich-case
	如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个
• foreach 遍历集合
	 -->
	 <!--
	 (1) 查询员工，要求，携带了哪个字段查询条件就带上这个字段的值
     (2) 查询的时候如果某些条件没带可能sql拼装会有问题,解决办法
	  1、mybatis使用where标签来将所有的查询条件包括在内。and写在前面，写在后面不行
	  mybatis就会将where标签中拼装的sql，mybatis只会去掉前面第一个多出来的and或者or。
	  2，给where后面加上1=1，以后的条件都and xxx.  推荐使用这种
	-->
	 <!-- public List<Employee> getEmpsByConditionIf(Employee employee); -->
	 <select id="getEmpsByConditionIf" resultType="com.atguigu.mybatis.bean.Employee">
	 	select * from tbl_employee
	 	<where>
	<!--
	   test：判断表达式（OGNL）OGNL参照PPT或者官方文档。
	   c:if  test
	   从参数中取值进行判断，遇见特殊符号应该去写转义字符：
	   &amp;&amp; 等同于 &&,也可以写and
	   &quot;&quot; 等同于""
	-->
			<if test="id!=null">
				and	id=#{id}
			</if>
			<if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
				and last_name like #{lastName}
			</if>
			<if test="email!=null and email.trim()!=&quot;&quot;">
				and email=#{email}
			</if>
			<!-- ognl会进行字符串与数字的转换判断  "0"==0 -->
			<if test="gender==0 or gender==1">
				and gender=#{gender}
			</if>
		</where>
	 </select>


	<select id="getEmpsByConditionWhere" resultType="com.atguigu.mybatis.bean.Employee">
		select * from tbl_employee
		where 1 = 1
			<if test="id!=null">
				and id=#{id}
			</if>
			<if test="lastName!=null and lastName!=''">
				and last_name like #{lastName}
			</if>
			<if test="email!=null and email.trim()!=''">
				and email=#{email}
			</if>
			<if test="gender!=null and gender.trim()!=''">
				and gender=#{gender}
			</if>
	</select>

	<!--
	后面多出的and或者or where标签不能解决
	自定义字符串的截取规则
    prefix="":前缀：trim标签体中是整个字符串拼串后的结果。
            prefix给拼串后的整个字符串加一个前缀
    prefixOverrides="":
            前缀覆盖： 去掉整个字符串前面多余的字符
    suffix="":后缀
            suffix给拼串后的整个字符串加一个后缀
    suffixOverrides=""
            后缀覆盖：去掉整个字符串后面多余的字符
    -->

	<!--public List<Employee> getEmpsByConditionTrim1(Employee employee);  -->
	<select id="getEmpsByConditionTrim1" resultType="com.atguigu.mybatis.bean.Employee">
		select * from tbl_employee
		<trim prefix="where" prefixOverrides="and">
			<if test="id!=null">
				and id=#{id}
			</if>
			<if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
				and last_name like #{lastName}
			</if>
			<if test="email!=null and email.trim()!=&quot;&quot;">
				and email=#{email}
			</if>
			<if test="gender==0 or gender==1">
				and gender=#{gender}
			</if>
		</trim>
	</select>

	 <!--public List<Employee> getEmpsByConditionTrim2(Employee employee);  -->
	 <select id="getEmpsByConditionTrim2" resultType="com.atguigu.mybatis.bean.Employee">
	 	select * from tbl_employee
	 	<trim prefix="where" suffixOverrides="and">
	 		<if test="id!=null">
		 		id=#{id} and
		 	</if>
		 	<if test="lastName!=null &amp;&amp; lastName!=&quot;&quot;">
		 		last_name like #{lastName} and
		 	</if>
		 	<if test="email!=null and email.trim()!=&quot;&quot;">
		 		email=#{email} and
		 	</if> 
		 	<!-- ognl会进行字符串与数字的转换判断  "0"==0 -->
		 	<if test="gender==0 or gender==1">
		 	 	gender=#{gender} and
		 	</if>
		 </trim>
	 </select>
	 
	 <!-- public List<Employee> getEmpsByConditionChoose(Employee employee); -->
	 <select id="getEmpsByConditionChoose" resultType="com.atguigu.mybatis.bean.Employee">
	 	select * from tbl_employee 
	 	<where>
	 		<!-- 如果带了id就用id查，如果带了lastName就用lastName查;只会进入其中一个 -->
	 		<choose>
	 			<when test="id!=null">
	 				id=#{id}
	 			</when>
	 			<when test="lastName!=null">
	 				last_name like #{lastName}
	 			</when>
	 			<when test="email!=null">
	 				email = #{email}
	 			</when>
	 			<otherwise>
	 				gender = 0
	 			</otherwise>
	 		</choose>
	 	</where>
	 </select>


	<!--public void updateEmpSet(Employee employee);  -->
	<update id="updateEmpSet">
		<!-- Set标签的使用 -->
		update tbl_employee
		<set>
			<if test="lastName!=null">
				last_name=#{lastName},
			</if>
			<if test="email!=null">
				email=#{email},
			</if>
			<if test="gender!=null">
				gender=#{gender}
			</if>
		</set>
		where id=#{id}
	</update>

	<!--public void updateEmpTrimSet(Employee employee);  -->
	<update id="updateEmpTrimSet">
		<!-- Trim：更新拼串 -->
             update tbl_employee
             <trim prefix="set" suffixOverrides=",">
                 <if test="lastName!=null">
                     last_name=#{lastName},
                 </if>
                 <if test="email!=null">
                     email=#{email},
                 </if>
                 <if test="gender!=null">
                     gender=#{gender}
                 </if>
             </trim>
             where id=#{id}
	</update>

	<!--public List<Employee> getEmpsByConditionForeach(List<Integer> ids);  -->
	<select id="getEmpsByConditionForeach" resultType="com.atguigu.mybatis.bean.Employee">
		select * from tbl_employee
		<!--
            collection：指定要遍历的集合：
                list类型的参数会特殊处理封装在map中，map的key就叫list
                也可以通过@Param("ids")指定key, 后面也得跟着变成collection="ids"
            item：将当前遍历出的元素赋值给指定的变量
            separator:每个元素之间的分隔符
            open：遍历出所有结果后，拼接一个开始的字符
            close:遍历出所有结果后，拼接一个结束的字符
            index:索引。遍历list的时候是index就是索引，item就是当前值
                          遍历map的时候index表示的就是map的key，item就是map的值

            #{变量名}就能取出变量的值也就是当前遍历出的元素
          -->
		<foreach collection="list" item="item_id" separator=","
				 open="where id in(" close=")">
			#{item_id}
		</foreach>
	</select>

	 
	 <!-- 批量保存，mysql -->
	 <!--第1种
	 MySQL下批量保存：可以foreach遍历
	 mysql支持values(),(),()语法
	 -->
	<!--public void addEmps01(@Param("emps")List<Employee> emps);  -->
	<insert id="addEmps01">
	 	insert into tbl_employee(
	 		<include refid="insertColumn"></include>
	 	)
		values
		<foreach collection="emps" item="emp" separator=",">
			(#{emp.lastName},#{emp.gender},#{emp.email},#{emp.dept.id})
		</foreach>
	 </insert>
	 
	 <!-- 第2种
	 分号分隔多个sql，可用于其他的批量操作（删除，修改）
	 这种方式需要数据库连接属性 allowMultiQueries=true；
	 	-->
	 <insert id="addEmps02">
	 	<foreach collection="emps" item="emp" separator=";">
	 		insert into tbl_employee(last_name,gender,email,d_id)
	 		values(#{emp.lastName},#{emp.gender},#{emp.email},#{emp.dept.id})
	 	</foreach>
	 </insert>
	 
	 <!-- 批量保存，oracle
	 	Oracle不支持values(),(),()
	 	Oracle支持的批量方式
	 	第1种,多个insert放在begin - end里面
	 		begin
			    insert into tbl_employee(id,last_name,email)
			    values(seq_tbl_employee.nextval,'test_001','test_001@atguigu.com');
			    insert into tbl_employee(id,last_name,email)
			    values(seq_tbl_employee.nextval,'test_002','test_002@atguigu.com');
			end;
	 -->

	<insert id="addEmps01" databaseId="oracle">
		<!-- oracle第1种批量保存方式 -->
		<foreach collection="emps" item="emp" open="begin" close="end;">
            insert into tbl_employee(id,last_name,email)
               values(seq_tbl_employee.nextval,#{emp.lastName},#{emp.email});
        </foreach>
	</insert>

	<!--
       第2种,利用中间表：
       insert into tbl_employee(id,last_name,email)
          select seq_tbl_employee.nextval,lastName,email from(
                 select 'test_a_01' lastName,'test_a_e01' email from dual
                 union
                 select 'test_a_02' lastName,'test_a_e02' email from dual
                 union
                 select 'test_a_03' lastName,'test_a_e03' email from dual
          )
    -->

	<insert id="addEmps02" databaseId="oracle">
	 	<!-- oracle第2种批量保存方式  -->
	 	insert into tbl_employee(
	 		<!-- 引用外部定义的sql -->
	 		<include refid="insertColumn">
	 			<property name="testColomn" value="abc"/>
	 		</include>
	 	)
		<foreach collection="emps" item="emp" separator="union"
			open="select seq_tbl_employee.nextval,lastName,email from("
			close=")">
			select #{emp.lastName} lastName,#{emp.email} email from dual
		</foreach>
	 </insert>


	<!--
        抽取可重用的sql片段。方便后面引用
        1、sql抽取：将经常要查询或插入的列名抽取出来方便引用
        2、include 引用已经抽取的sql：
        3、include还可以自定义一些property，sql标签内部就能使用自定义的属性
                include-property：取值的正确方式${prop},不能使用这种方式#{prop}
    -->
	<sql id="insertColumn">
		<if test="_databaseId=='oracle'">
			id,last_name,email
		</if>
		<if test="_databaseId=='mysql'">
			last_name,gender,email,d_id
		</if>
	</sql>

	 <!-- 两个内置参数：
	 	不只是方法传递过来的参数可以被用来判断，取值。。。
	 	mybatis默认还有两个内置参数：
	 	_parameter:代表整个参数
	 		单个参数：_parameter就是这个参数，请查阅"mybatis参数处理.txt"
	 		多个参数：参数会被封装为一个map；_parameter就是代表这个map
	 	
	 	_databaseId:如果配置了databaseIdProvider标签。
	 		_databaseId就是代表当前数据库的别名oracle
	  -->
	  
	  <!-- public List<Employee> getEmpsTestInnerParameterSingle(String lastName); -->
	  <select id="getEmpsTestInnerParameterSingle" resultType="com.atguigu.mybatis.bean.Employee">
	  		<!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
	  		<if test="_databaseId=='mysql'">
	  			select * from tbl_employee
	  			<if test="_parameter!=null">
	  				where last_name like #{_parameter}
					<!-- where last_name like #{任意值} -->
	  			</if>
	  		</if>
	  		<if test="_databaseId=='oracle'">
	  			select * from tbl_employee
	  			<if test="_parameter!=null">
	  				where last_name like #{_parameter}
					<!-- where last_name like #{任意值} -->
	  			</if>
	  		</if>
	  </select>

	<!--public List<Employee> getEmpsTestInnerParameterMuti(Employee employee); -->
	<select id="getEmpsTestInnerParameterMuti" resultType="com.atguigu.mybatis.bean.Employee">
		<!-- bind：可以将OGNL表达式的值绑定到一个变量中，方便后来引用这个变量的值 -->
		<bind name="_lastName" value="'%'+lastName+'%'"/>
		<if test="_databaseId=='mysql'">
			select * from tbl_employee
			<if test="_parameter!=null">
				where last_name like #{_lastName}
				<!--
				这样两种写法可以
				where last_name like #{_lastName}
				where last_name like '%${lastName}%'  这种方式不安全，不推荐
				推荐方式是前面直接这么传参：employee2.setLastName("%e%");后面取值 #{lastName}

				这样写不行
				where last_name like '%#{lastName}%'
				-->
			</if>
		</if>
		<if test="_databaseId=='oracle'">
			select * from tbl_employee
			<if test="_parameter!=null">
				where last_name like #{lastName}
				<!-- where last_name like #{_parameter.lastName} -->
			</if>
		</if>
	</select>

</mapper>